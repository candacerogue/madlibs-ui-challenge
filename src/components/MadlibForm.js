const React = require('react');
// We're going to use this open source forms library to create our
// madlib form
const t = require('tcomb-form'); //Really want to learn more about this form, how do you all override stylesheet? Lots of documentation for React-Native, but not necessarily for the React verison
const { Form } = t.form;
const $ = require('jquery');

const MadlibForm = React.createClass({
  // this is the function that renders the form. most of the HTML
  // is generated by the forms library, so you're pretty much stuck to
  // how they format it.
  getDefaultProps: function() {
    return {
      requireError: 'oops, you missed this one',
      endingWithLyError: 'this one has to end with "ly"'
    };
  },


  render: function() {
    return (
      <div className='madlib-form'>
        <h3>Flocabulary Madlib</h3>
        <form onSubmit={this.onSubmit}>
          <Form
            ref="form"
            onChange={this.onChange}
            value={this.state.value}
            type={this.state.type}
            options={this.state.options}
          />
          {
            Object.keys(this.state.value).filter(key => this.state.value[key]).length === Object.keys(this.state.inputs).length
            ? (
                <button
                  className="submit-button"
                  type="submit"
                  id="formSubmit"
                >
                  Make your mad lib!
                </button>
              )
            : null
          }
        </form>
      </div>
    );
  },
  // you probably shouldn't have to touch any of the other functions
  // on this class
  getInitialState: function() {
    let inputs = {};
    let result;

    t.String.getValidationErrorMessage = (value, path) => {
      if (!value) {
        return this.props.requireError;
      }
      if (path[0] === 'wordEndingWithLy' && !value.endsWith('ly')) {
        return this.props.endingWithLyError;
      }
    }

    let blankRegexp = /%&(.*?)&%/gi;
    while (result = blankRegexp.exec(this.props.text)) {
      let fieldType;
      if (result[1] === 'wordEndingWithLy') {
        fieldType = t.refinement(t.String, s => s.endsWith('ly'));
      } else if (result[1] === 'number') {
        fieldType = t.Number;
      } else {
        fieldType = t.String;
      }

      inputs[result[1]] = fieldType;
    }

    return {
      type: t.struct(inputs),
      options: {
        fields: {
          number: {
            type: 'number'
          }
        }  
      },
      value: {},
      submitted: false,
      inputs: inputs
    };
  },

 //Using Jquery to give focus to current MadLib div
 //If the form is not completed we're using the key, 'Enter' to trigger focus 
 //Didn't have enough time to submit more CSS to accomodate  
  // handleKeyDown: function (e) {
  //   if (e.key === 'Enter') {
  //     e.preventDefault();
  //     var formValues = this.state.value;

  //     if (Object.keys(formValues).length === 8) {
  //       $('#formSubmit').click();
  //     } else {
  //       var $parentDiv = $(`#${e.target.id}`).parent();
  //       var $nextDiv = $parentDiv.next('.form-group');

  //       $parentDiv.removeClass('has-focus');
  //       $nextDiv.addClass('show');
  //       $nextDiv.addClass('has-focus');
  //       $nextDiv.children('input').focus();
  //     }
  //   }
  // },

  //After component mounts the DOm we want to show the very first label & input and give it focus)
  componentDidMount: function() {
    //$(input).focus();
    $('#tfid-7-0').focus();
    $('.form-group-yourFavoriteRight').addClass('show');
    $('.form-group-yourFavoriteRight').addClass('has-focus');

    $( ".madlib-form input" ).focus(function(e) {
       $('.has-focus').removeClass('has-focus');
       $(e.target).parent().addClass('has-focus');
    });
  },

  //Submitting form values, but need to connect to button id #formSubmit.  
  onSubmit: function(event) {
    event.preventDefault();
    if (this.formsAreValid()) {
      this.props.onSubmit(this.getFormValues());
    }
  },
  onChange: function(value, path) {
    this.setState(
      { value: value }
    );
   this.refs.form.getComponent(path).validate();
  },

  formsAreValid: function() {
    return !this.refs.form.validate().errors.length;
  },
  getFormValues: function() {
    return this.refs.form.getValue();
  }
});

module.exports = MadlibForm;
